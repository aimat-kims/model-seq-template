# PLEASE DO NOT EDIT THIS FILE
# This file is used to create a FastAPI server for model inference.

from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse
from pydantic import BaseModel
from typing import List, Any
from utils.infer import run_infer
from utils.config import MODEL_NAME, MODEL_VERSION, INPUT_FEATURE_LIST, MODEL_PREDICTION_TEMPLATE
from time import time

# Pydantic model for input/output object
class InputObject(BaseModel):
    name: str
    value: Any
    type: str

# Pydantic model for request body 
class InferenceRequest(BaseModel):
    model_input: List[InputObject]

# Pydantic model for response body
class InferenceResponse(BaseModel):
    status: str
    results: List[InputObject]  # Same structure as input
    duration: float

# Create FastAPI app
app = FastAPI(title=f"{MODEL_NAME} API", version=MODEL_VERSION)

@app.get("/")
async def root():
    return FileResponse("index.html")

@app.get("/config")
async def get_config():
    """
    Endpoint to get model configuration including input features and prediction template
    """
    return {
        "model_name": MODEL_NAME,
        "model_version": MODEL_VERSION,
        "input_features": INPUT_FEATURE_LIST,
        "prediction_template": MODEL_PREDICTION_TEMPLATE
    }

@app.post("/infer/", response_model=InferenceResponse)
async def infer(request: InferenceRequest):
    """
    Endpoint to run inference with custom input 
    Returns results in the same structure as input: list of objects with name, value, type
    """
    try:
        start_time = time()
        # Convert Pydantic objects to dict format for the inference function
        model_input_dict = [item.model_dump() for item in request.model_input]
        
        # Run inference with provided input
        results = run_infer(model_input_dict)
        
        end_time = time()
        duration = end_time - start_time
        
        return InferenceResponse(
            status="success",
            results=results,
            duration=duration
        )
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))



